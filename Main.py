# motivational_bot_g4f.py
"""
Telegram-–±–æ—Ç –¥–ª—è –º–æ—Ç–∏–≤–∞—Ü–∏–∏ —Å AI-–ø–æ–¥–¥–µ—Ä–∂–∫–æ–π (g4f) –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π Todoist —á–µ—Ä–µ–∑ REST API.
–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª:
- –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ –≤–µ—á–µ—Ä–Ω–µ–º—É –æ—Ç—á–µ—Ç—É —Å AI-–æ—Ü–µ–Ω–∫–æ–π
- –¢—Ä–∏ —Å—Ç–∏–ª—è –º–æ—Ç–∏–≤–∞—Ü–∏–∏: –∂–µ—Å—Ç–∫–∏–π, –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π, –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π
- –ö–æ–º–∞–Ω–¥—ã /status –∏ /help
- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –º–µ—Ç—Ä–∏–∫ –≤ JSON-—Ñ–∞–π–ª
"""
import os
import time
import schedule
import requests
import json
import random
from datetime import datetime, date
from dateutil import parser as date_parser

import telebot
from g4f.client import Client

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
TODOIST_TOKEN   = os.getenv('TODOIST_TOKEN')
CHAT_ID         = 6791533117
LOG_FILE        = os.getenv('LOG_FILE', 'bot_log.json')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot = telebot.TeleBot(TELEGRAM_TOKEN)
llm = Client(verify=False)

# –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ª–æ–≥
if os.path.exists(LOG_FILE):
    with open(LOG_FILE, 'r', encoding='utf-8') as f:
        log_data = json.load(f)
else:
    log_data = {'messages': [], 'daily_reports': {}}

# –°—Ç–∏–ª–∏ –º–æ—Ç–∏–≤–∞—Ü–∏–∏
STYLES = {
    'hard': 'ü•µ –ñ–µ—Å—Ç–∫–∞—è –º–æ—Ç–∏–≤–∞—Ü–∏—è:',
    'soft': '‚òïÔ∏è –î—Ä—É–∂–µ–ª—é–±–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞:',
    'analytic': 'üìä –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∞—è –º–æ—Ç–∏–≤–∞—Ü–∏—è:'
}

# === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ===

def log_event(event_type: str, content: str):
    entry = {'time': datetime.now().isoformat(), 'type': event_type, 'content': content}
    log_data['messages'].append(entry)
    with open(LOG_FILE, 'w', encoding='utf-8') as f:
        json.dump(log_data, f, ensure_ascii=False, indent=2)


def generate_message(prompt: str) -> str:
    resp = llm.chat.completions.create(
        model='gpt-4o',
        messages=[{'role': 'user', 'content': prompt}]
    )
    return resp.choices[0].message.content.strip()


def fetch_todo_count_for_today() -> int:
    """–ü–æ–¥—Å—á–µ—Ç –∑–∞–¥–∞—á –Ω–∞ —Å–µ–≥–æ–¥–Ω—è —á–µ—Ä–µ–∑ REST API Todoist."""
    url = "https://api.todoist.com/rest/v2/tasks"
    headers = {"Authorization": f"Bearer {TODOIST_TOKEN}"}
    r = requests.get(url, headers=headers)
    tasks = r.json() if r.status_code == 200 else []
    today = date.today()
    return sum(1 for t in tasks if t.get('due') and date_parser.parse(t['due']['date']).date() == today)

# === –†–∞—Å—Å—ã–ª–∫–∏ ===

def choose_style() -> str:
    return random.choice(list(STYLES.keys()))


def send_morning_message():
    count = fetch_todo_count_for_today()
    style = choose_style()
    prompt = (
        f"–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –°–µ–≥–æ–¥–Ω—è —É —Ç–µ–±—è {count} –∑–∞–¥–∞—á –≤ Todoist. "
        "–ù–∞—á–Ω–∏ –¥–µ–Ω—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ: —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω–æ–º –∏ –¥–µ–π—Å—Ç–≤—É–π!"
    )
    ai_text = generate_message(prompt)
    text = f"{STYLES[style]}\n{ai_text}"
    bot.send_message(CHAT_ID, text)
    log_event('morning', text)


def send_periodic_motivation():
    now = datetime.now().strftime('%H:%M')
    style = choose_style()
    prompt = (f"–°–µ–π—á–∞—Å {now}. –ü–æ–¥–¥–µ—Ä–∂–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –Ω–∞–ø–æ–º–Ω–∏ –µ–º—É —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Ñ–æ–∫—É—Å –∏ –∏–∑–±–µ–≥–∞—Ç—å –ø—Ä–æ–∫—Ä–∞—Å—Ç–∏–Ω–∞—Ü–∏–∏.")
    ai_text = generate_message(prompt)
    text = f"{STYLES[style]}\n{ai_text}"
    bot.send_message(CHAT_ID, text)
    log_event('periodic', text)


def send_evening_report_prompt():
    prompt = (
        "–ü–æ—Ä–∞ –ø–æ–¥–≤–µ—Å—Ç–∏ –∏—Ç–æ–≥–∏ –¥–Ω—è: –ø–æ–ø—Ä–æ—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å, —á—Ç–æ –æ–Ω —Å–¥–µ–ª–∞–ª —Å–µ–≥–æ–¥–Ω—è, "
        "–∫–∞–∫–∏–µ —É—Å–ø–µ—Ö–∏ –∏ –Ω–∞–º–µ—Ç–∫–∏ –∑–∞–¥–∞—á –Ω–∞ –∑–∞–≤—Ç—Ä–∞."
    )
    ai_text = generate_message(prompt)
    text = f"üåô –í–µ—á–µ—Ä–Ω–∏–π –æ—Ç—á—ë—Ç:\n{ai_text}"
    bot.send_message(CHAT_ID, text)
    log_event('evening_prompt', text)

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—á—ë—Ç–∞ –¥–Ω—è ===
@bot.message_handler(func=lambda m: m.text and m.text.startswith('–û—Ç—á—ë—Ç:'))
def handle_daily_report(message):
    report = message.text.replace('–û—Ç—á—ë—Ç:', '').strip()
    date_key = date.today().isoformat()
    # AI-–æ—Ü–µ–Ω–∫–∞ –æ—Ç—á—ë—Ç–∞
    prompt = f"–û—Ü–µ–Ω–∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ —ç—Ç–æ–º—É –æ—Ç—á–µ—Ç—É: {report}"
    evaluation = generate_message(prompt)
    reply = f"–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç—á—ë—Ç! –ú–æ—è –æ—Ü–µ–Ω–∫–∞: {evaluation}"
    bot.send_message(message.chat.id, reply)
    # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
    log_data['daily_reports'][date_key] = {'report': report, 'evaluation': evaluation}
    with open(LOG_FILE, 'w', encoding='utf-8') as f:
        json.dump(log_data, f, ensure_ascii=False, indent=2)
    log_event('daily_report', report)

# === Telegram –∫–æ–º–∞–Ω–¥—ã ===
@bot.message_handler(commands=['status'])
def cmd_status(message):
    count = fetch_todo_count_for_today()
    text = f"–£ –≤–∞—Å {count} –∑–∞–¥–∞—á –Ω–∞ —Å–µ–≥–æ–¥–Ω—è. –î–µ—Ä–∂–∏–º –∫—É—Ä—Å –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ!"
    bot.send_message(message.chat.id, text)
    log_event('command', '/status')

@bot.message_handler(commands=['help'])
def cmd_help(message):
    text = (
        "/status ‚Äî —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á\n"
        "/help ‚Äî —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
        "–ü—Ä–∏—Å—ã–ª–∞–π—Ç–µ –æ—Ç—á—ë—Ç, –Ω–∞—á–∏–Ω–∞—è —Å–æ–æ–±—â–µ–Ω–∏–µ —Å '–û—Ç—á—ë—Ç:'"
    )
    bot.send_message(message.chat.id, text)
    log_event('command', '/help')

# === –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è ===

def send_goodnight_message():
    """
    –í–µ—á–µ—Ä–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ —Å–Ω–æ–º
    """
    prompt = (
        "–°–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏, –∫–∞–ø–∏—Ç–∞–Ω. –í—ã —Å–µ–≥–æ–¥–Ω—è –æ—Ç–ª–∏—á–Ω–æ –ø–æ—Ä–∞–±–æ—Ç–∞–ª–∏! "
        "–û—Ç–¥—ã—Ö–∞–π—Ç–µ, –∞ –∑–∞–≤—Ç—Ä–∞ –ø—Ä–æ–¥–æ–ª–∂–∏–º."
    )
    ai_text = generate_message(prompt)
    text = f"üåô –°–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏:
{ai_text}"
    bot.send_message(CHAT_ID, text)
    log_event('goodnight', text)


def schedule_jobs():
    schedule.every().day.at("08:30").do(send_morning_message)
    schedule.every().day.at("11:30").do(send_periodic_motivation)
    schedule.every().day.at("14:30").do(send_periodic_motivation)
    schedule.every().day.at("17:30").do(send_periodic_motivation)
    schedule.every().day.at("20:00").do(send_evening_report_prompt)
    schedule.every().day.at("21:30").do(send_goodnight_message)

# === –ó–∞–ø—É—Å–∫ ===
if __name__ == '__main__':
    schedule_jobs()
    # –ø–æ—Ç–æ–∫ –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    def run_schedule():
        while True:
            schedule.run_pending()
            time.sleep(30)

    import threading
    threading.Thread(target=run_schedule, daemon=True).start()

    print("ü§ñ AI –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞—é —Å–æ–æ–±—â–µ–Ω–∏–π –∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ...")
    bot.infinity_polling()
